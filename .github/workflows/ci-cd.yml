name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main, develop ]

env:
  ELIXIR_VERSION: "1.18.2"
  OTP_VERSION: "27"

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-unknown-linux-gnu

    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-

    - name: Install dependencies
      run: mix deps.get

    - name: Compile
      run: mix compile

    - name: Run tests
      run: mix test

    - name: Run dialyzer
      run: mix dialyzer

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.repository == 'cortfritz/ex_mgrs'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-unknown-linux-gnu

    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-

    - name: Install dependencies
      run: mix deps.get

    - name: Compile
      run: mix compile

    - name: Run tests
      run: mix test

    - name: Check if version changed
      id: version-check
      run: |
        # Get current version from mix.exs
        CURRENT_VERSION=$(grep 'version:' mix.exs | sed 's/.*version: "\(.*\)",/\1/')
        echo "Current version in mix.exs: $CURRENT_VERSION"
        
        # Get the previous version from git history
        PREVIOUS_VERSION=$(git log --oneline -n 10 --grep="Bump version" | head -1 | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' || echo "0.0.0")
        echo "Previous version from git: $PREVIOUS_VERSION"
        
        # Check if version has changed
        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
          echo "Version has changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          echo "should_publish=true" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        else
          echo "Version has not changed ($CURRENT_VERSION), skipping publish"
          echo "should_publish=false" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Publish to Hex
      if: steps.version-check.outputs.should_publish == 'true'
      env:
        HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
      run: |
        echo "Publishing version ${{ steps.version-check.outputs.version }} to Hex"
        mix hex.publish --yes

    - name: Skip publish
      if: steps.version-check.outputs.should_publish == 'false'
      run: |
        echo "Skipping publish - version ${{ steps.version-check.outputs.version }} already exists on Hex" 